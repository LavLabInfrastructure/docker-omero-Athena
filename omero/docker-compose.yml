version: "3.7"

services:
  omeroserver:
    build: ${OMEROSERVER_DOCKERFILE:-https://github.com/barrettMCW/docker-omero-serverLLAB.git}
    env_file: ${DOA_CONF_DIR:-./configs/omero-conf}/omeroserver/server.env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-k", "--http0.9", "https://localhost:4064",]

    environment:
      - ROOTPASS=${OMERO_ROOT_PASS:-password}
      - IMPORTPASS=${OMERO_IMPORTER_PASS:-password}
      - IMPORTGROUP=${OMERO_IMPORTER_GROUP:-groupname}

      # takes builtin graphite output and exports to prometheus 
      # monitoring services not fully implemented yet
      # GRAPHITE_TO_PROMETHEUS: ${GRAPHITE_TO_PROMETHEUS:-true}

      - POSTGRES_DB=root
      - CONFIG_omero_db_host=postgres
      - CONFIG_omero_db_name=${OMERO_POSTGRES_DB:-omero}
      - CONFIG_omero_db_user=${POSTGRES_USER:-root}
      - CONFIG_omero_db_pass=${POSTGRES_PASSWORD:-password}

    networks:
      - backend
      - frontend
      
    volumes:
      - ${CERT_DIR:-./certs}/omero:/etc/ssl/omero:ro
      - ${DOA_DATA_DIR:-./instance}/server/:/OMERO/
      - ${DOA_DATA_DIR:-./instance}/omeTIFF/:/database/:ro
      - ${LOG_DIR:-./instance/logs}/server/:/opt/omero/server/OMERO.server/var/log/


  omeroweb:
    build: ${OMEROWEB_DOCKERFILE:-https://github.com/LavLabInfrastructure/docker-omero-webLLAB.git}
    env_file: ${DOA_CONF_DIR:-./configs/omero-conf}/omeroweb/web.env
    restart: unless-stopped

    depends_on:
      - omeroserver
    
    environment:
      - OMEROHOST=omeroserver 
      - CONFIG_omero_web_secure=false
  
    networks:
      - frontend

    volumes:
      - omero-static:/opt/omero/web/OMERO.web/var/static/
      - ${LOG_DIR:-./instance/logs}/web:/opt/omero/web/OMERO.web/var/log


  omerodropbox:
    build: ${OMEROPIPE_DOCKERFILE:-https://github.com/barrettMCW/docker-omero-dropbox.git}
    env_file: ${DOA_CONF_DIR:-./configs/omero-conf}/pipeline/pipe.env
    restart: unless-stopped
    
    labels:
      - prometheus-scrape.enabled=true

    environment:
      - ENABLE_GRAFANA=true

    volumes:
      - alert_rules:/etc/prometheus/rules
      - grafana_provisioning:/etc/grafana/provisioning
      - ${DOA_CONF_DIR:-./configs/omero-conf}/pipeline/:/config

      - "${DOA_IMPORT_DIR:-./instance/in}/BRAIN/:/in/BRAIN/"
      - "${DOA_IMPORT_DIR:-./instance/in}/PROSTATE/:/in/PROSTATE/"

      - "${DOA_DATA_DIR:-./instance}/omeTIFF/:/out/"
      - "${LOG_DIR:-./instance/logs}/pipeline/:/log/"
    
    networks:
      - monitoring


  postgres:
    image: postgres:${PG_VERSION:-12.2-alpine}
    healthcheck: 
      test: ["CMD", "pg_isready"]
    restart: unless-stopped

    volumes:
      - ${PG_DATA_DIR:-./instance}/postgres:/postgres
      - ${LOG_DIR:-./instance/logs}/postgres/:/log/
      - ${DOA_CONF_DIR:-./configs/omero-conf}/postgres/pg.conf:/etc/postgresql/postgresql.conf:ro

    environment:
      - PGDATA=/postgres/data/
      - POSTGRES_INITDB_WALDIR=/postgres/wal/
      
      - POSTGRES_DB=root
      - POSTGRES_USER=${POSTGRES_USER:-root}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}

    networks:
      - backend

  nginx:
    build: 
      context: ${NGINX_DOCKERFILE:-https://github.com/LavLabInfrastructure/nginxLLAB.git}
      args:
        - NGINX_VERSION=${NGINX_VERSION:-1.19-alpine-perl}
    restart: unless-stopped
    
    depends_on:
      omeroweb:
        condition: service_healthy

    ports:
      - 80:80
      - 443:443

    networks:
      - frontend

    volumes:
      - omero-static:/opt/static/nginx/omero/:ro
      - ${CERT_DIR:-./certs}/omero:/etc/ssl/omero:ro
      - ${DOA_CONF_DIR:-./configs/omero-conf}/nginx/:/etc/nginx/conf.d/omero:ro


  redis:
    image: redis:${REDIS_VERSION:-7.0.8}
    restart: unless-stopped

    networks:
      - frontend


networks:
  monitoring:
  frontend:
  backend:

volumes:
  alert_rules:
    driver_opts:
      type: tmpfs
      device: tmpfs
  grafana_provisioning:
    driver_opts:
      type: tmpfs
      device: tmpfs
  omero-static:
    driver_opts:
      type: tmpfs
      device: tmpfs