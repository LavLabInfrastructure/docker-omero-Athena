version: "3.7"

networks:
  frontend:
  backend:

volumes:
  nginx-conf:
    driver_opts:
      type: tmpfs
      device: tmpfs
  omero-static:
    driver_opts:
      type: tmpfs
      device: tmpfs

services:
  omeropg:
    image: "postgres:14-alpine"
    environment:
      PGDATA: /postgres/data/
      POSTGRES_INITDB_WALDIR: /postgres/wal/

      POSTGRES_DB: omerodatabase
      POSTGRES_USER: ${DOA_PG_USER:-pguser}
      POSTGRES_PASSWORD: ${DOA_PG_PASS:-pgpass}

    networks:
      - backend

    volumes:
      - "${DOA_LOG_DIR:-./instance/logs}/postgres/:/log/"
      - "${DOA_DATA_DIR:-./instance}/postgres/wal:/postgres/wal"
      - "${DOA_DATA_DIR:-./instance}/postgres/data:/postgres/data"
      - "${DOA_CONF_DIR:-./configs/omero-dev-conf}/omeropg/pg.conf:/etc/postgresql/postgresql.conf:ro"


  omeroserver:
    build: ${DOA_SERVER_DOCKERFILE:-https://github.com/barrettMCW/docker-omero-serverLLAB.git}
    env_file: ${DOA_CONF_DIR:-./configs/omero-dev-conf}/omeroserver/server.env

    environment:
      #password for root
      ROOTPASS: ${DOA_OME_ROOT_PASS:-password}

      # takes builtin graphite output and exports to prometheus
      GRAPHITE_TO_PROMETHEUS: ${GRAPHITE_TO_PROMETHEUS:-true}

      #password for importer
      IMPORTPASS: ${DOA_OME_IMPORTER_PASS:-password}
      #name of importer group should you have a dataset
      IMPORTGROUP: ${DOA_OME_IMPORTER_GROUP:-groupname}

      #name of postgres container
      CONFIG_omero_db_host: omeropg
      #POSTGRES_DB
      CONFIG_omero_db_name: ${DOA_PG_DB:-omerodatabase}
      #POSTGRES_USER
      CONFIG_omero_db_user: ${DOA_PG_USER:-pguser}
      #POSTGRES_PASSWORD
      CONFIG_omero_db_pass: ${DOA_PG_PASS:-pgpass}

    networks:
      - backend
      - frontend

    ports:
      - "4064:4064"
      - "4066:4066"
      
    volumes:
      - "${DOA_DATA_DIR:-./instance}/server/:/OMERO/"
      - "${DOA_CERT_DIR:-./certs/}:/etc/ssl/omero:ro"
      - "${DOA_DATA_DIR:-./instance}/omeTIFF/:/database/:ro"
      - "${DOA_LOG_DIR:-./instance/logs}/server/:/opt/omero/server/OMERO.server/var/log/"


  omeroweb:
    build: ${DOA_WEB_DOCKERFILE:-https://github.com/LavLabInfrastructure/docker-omero-webLLAB.git}
    env_file: ${DOA_CONF_DIR:-./configs/omero-dev-conf}/omeroweb/web.env
    environment:
      OMEROHOST: omeroserver 

    networks:
      - frontend

    volumes:
      - "nginx-conf:/etc/nginx/conf.d/"
      - "omero-static:/opt/omero/web/OMERO.web/var/static/"

      - "${DOA_CONF_DIR:-./configs/omero-dev-conf}/nginx/:/nginx"
      - "${DOA_LOG_DIR:-./instance/logs}/web:/opt/omero/web/OMERO.web/var/log:rw"


  nginx:
    build: ${DOA_PROXY_DOCKERFILE:-https://github.com/LavLabInfrastructure/nginxLLAB.git}

    ports:
      - "80:80"
      - "443:443"

    networks:
      - frontend

    volumes:
      - "omero-static:/opt/static/nginx/omero/:ro"
      - "nginx-conf:/etc/nginx/conf.d/volume"


  redis:
    image: redis:latest

    networks:
      - frontend


  omerodropbox:
    build: ${DOA_PIPE_DOCKERFILE:-https://github.com/barrettMCW/docker-omero-dropbox.git}
    env_file: ${DOA_CONF_DIR:-./configs/omero-dev-conf}/pipeline/pipe.env
    labels:
      - prometheus-scrape.enabled=true
    volumes:
      - alert_rules:/etc/prometheus/rules
      - grafana_provisioning:/etc/grafana/provisioning
      - ${DOA_CONF_DIR:-./configs/omero-dev-conf}/pipeline/:/config

      - "${DOA_IMPORT_DIR:-./instance/in}/in/BRAIN/:/in/BRAIN/"
      - "${DOA_IMPORT_DIR:-./instance/in}/in/PROSTATE/:/in/PROSTATE/"

      - "${DOA_DATA_DIR:-./instance}/omeTIFF/:/out/"
      - "${DOA_DATA_DIR:-./instance}/rawTiff/:/archive/"

      - "${DOA_DATA_DIR:-./instance}/failed/:/fail/"
      - "${DOA_LOG_DIR:-./instance/logs}/pipeline/:/log/"

